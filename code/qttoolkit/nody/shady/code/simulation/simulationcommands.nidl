<?xml version="1.0" encoding="UTF-8"?>
<Nebula3>
	<Library name="SimulationCommands">
	<Dependency header="math/float4.h"/>
    <Dependency header="qpixmap.h"/>
    <Dependency header="qimage.h"/>
    <Dependency header="math/scalar.h"/>
    <Dependency header="math/float4.h"/>
    <Dependency header="simulation/simresult.h"/>
    <Dependency header="framesync/framesynctimer.h"/>
    <Dependency header="node/node.h"/>
    <Dependency header="util/keyvaluepair.h"/>
    <Dependency header="util/variant.h"/>

    <Command name="Add" fourcc="ADDC" desc="Kernel used to combine two QPixmap using an add operation">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* i1 = (Nody::SimResult*)input1;
          Nody::SimResult* i2 = (Nody::SimResult*)input2;
          Nody::SimResult* result = (Nody::SimResult*)output;
          
          int x, y;
          for (x = 0; x < result->GetWidth(); x++)
          {
            for (y = 0; y < result->GetHeight(); y++)
            {
              const Math::float4& pixel1 = i1->GetValue(x, y);
              const Math::float4& pixel2 = i2->GetValue(x, y);
              result->SetValue(pixel1 + pixel2, x, y);             
            }
          }
          result->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Subtract" fourcc="SUBC" desc="Kernel used to combine two QPixmap using an subtract operation">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* i1 = (Nody::SimResult*)input1;
          Nody::SimResult* i2 = (Nody::SimResult*)input2;
          Nody::SimResult* result = (Nody::SimResult*)output;
          
          int x, y;
          for (x = 0; x < result->GetWidth(); x++)
          {
            for (y = 0; y < result->GetHeight(); y++)
            {
              const Math::float4& pixel1 = i1->GetValue(x, y);
              const Math::float4& pixel2 = i2->GetValue(x, y);
              result->SetValue(pixel1 - pixel2, x, y);             
            }
          }
          result->UpdateGraphics();
        ]]>
      </Code>
    </Command>
    
    <Command name="Multiply" fourcc="MULC" desc="Multiplies values">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* i1 = (Nody::SimResult*)input1;
          Nody::SimResult* i2 = (Nody::SimResult*)input2;
          Nody::SimResult* result = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < result->GetWidth(); x++)
          {
            for (y = 0; y < result->GetHeight(); y++)
            {
              const Math::float4& pixel1 = i1->GetValue(x, y);
              const Math::float4& pixel2 = i2->GetValue(x, y);
              result->SetValue(Math::float4::multiply(pixel1, pixel2), x, y);    
            }
          }
          result->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Divide" fourcc="DIVC" desc="Divides values">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* i1 = (Nody::SimResult*)input1;
          Nody::SimResult* i2 = (Nody::SimResult*)input2;
          Nody::SimResult* result = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < result->GetWidth(); x++)
          {
            for (y = 0; y < result->GetHeight(); y++)
            {
              const Math::float4& pixel1 = i1->GetValue(x, y);
              const Math::float4& pixel2 = i2->GetValue(x, y);
              result->SetValue(Math::float4::divide(pixel1, pixel2), x, y);    
            }
          }
          result->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Copy" fourcc="COPC" desc="Copies pointer from source to input">
      <InArg name="input" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* in = (Nody::SimResult*)input;
          Nody::SimResult* out = (Nody::SimResult*)output;
          out->Copy(*in);
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Log" fourcc="LOGC" desc="Kernel which performs a log operation per value">
      <InArg name="input" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* in = (Nody::SimResult*)input;
          Nody::SimResult* out = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              Math::float4 pixel = in->GetValue(x, y);
              pixel.x() = Math::n_log(pixel.x());
              pixel.y() = Math::n_log(pixel.y());
              pixel.z() = Math::n_log(pixel.z());
              
              out->SetValue(pixel, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Normalize" fourcc="NORC" desc="Kernel which normalizes each pixel value">
      <InArg name="input" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* in = (Nody::SimResult*)input;
          Nody::SimResult* out = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              Math::float4 pixel = in->GetValue(x, y);
              pixel = Math::float4::normalize(pixel);
              
              out->SetValue(pixel, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Sin" fourcc="SINC" desc="Kernel which performs a sine operation per value">
      <InArg name="input" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* in = (Nody::SimResult*)input;
          Nody::SimResult* out = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              Math::float4 pixel = in->GetValue(x, y);
              pixel.x() = Math::n_sin(pixel.x());              
              pixel.y() = Math::n_sin(pixel.y());
              pixel.z() = Math::n_sin(pixel.z());
              
              out->SetValue(pixel, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Cos" fourcc="COSC" desc="Kernel which performs a cosine operation per value">
      <InArg name="input" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* in = (Nody::SimResult*)input;
          Nody::SimResult* out = (Nody::SimResult*)output;
          int x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              Math::float4 pixel = in->GetValue(x, y);
              pixel.x() = Math::n_cos(pixel.x());              
              pixel.y() = Math::n_cos(pixel.y());      
              pixel.z() = Math::n_cos(pixel.z());      
              
              out->SetValue(pixel, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Time" fourcc="TIMC" desc="Takes the current time">
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* out = (Nody::SimResult*)output;
          Timing::Time time = FrameSync::FrameSyncTimer::Instance()->GetScaledTime();
          out->Fill((float)time);
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="VertexColor" fourcc="VERC" desc="Vertex colors">
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              float red = Math::n_lerp(0, 1.0f, x / (float)out->GetWidth());
              float green = Math::n_lerp(0, 1.0f, 1.0f - x / (float)out->GetWidth());
              float blue = Math::n_lerp(0, 1.0f, y / (float)out->GetHeight());
              float alpha = 1.0f;
              out->SetValue(Math::float4(red, green, blue, alpha), x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="TexCoords" fourcc="TEXC" desc="Texture coordinates">
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* out = (Nody::SimResult*)output;
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              float red = Math::n_lerp(0, 1.0f, x / (float)out->GetWidth());
              float green = Math::n_lerp(0, 1.0f, y / (float)out->GetHeight());
              out->SetValue(Math::float4(red, green, 0, 1), x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Sample2DUV" fourcc="S2UV" desc="Sample a 2D texture">
      <InArg name="uv" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* res = (Nody::SimResult*)uv;
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              const Math::float4& uv = res->GetValue(x, y);
              float xpos = Math::n_fmod(Math::n_abs(uv.x()) * out->GetWidth(), out->GetWidth()-1);
              float ypos = Math::n_fmod(Math::n_abs(uv.y()) * out->GetWidth(), out->GetWidth()-1);
              const Math::float4 color = out->GetDefaultValue(xpos, ypos);
              out->SetValue(color, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Combine2" fourcc="COM2" desc="Combine 2 individual floats into a vec2">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* red = (Nody::SimResult*)input1;
          Nody::SimResult* green = (Nody::SimResult*)input2;
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              const Math::float4& c1 = red->GetValue(x, y);
              const Math::float4& c2 = green->GetValue(x, y);
              Math::float4 color;
              color.set(c1.x(), c2.y(), 0, 1);
              out->SetValue(color, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Combine3" fourcc="COM3" desc="Combine 3 individual floats into a vec3">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="input3" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* red = (Nody::SimResult*)input1;
          Nody::SimResult* green = (Nody::SimResult*)input2;
          Nody::SimResult* blue = (Nody::SimResult*)input3;
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              const Math::float4& c1 = red->GetValue(x, y);
              const Math::float4& c2 = green->GetValue(x, y);
              const Math::float4& c3 = blue->GetValue(x, y);
              Math::float4 color;
              color.set(c1.x(), c2.y(), c3.z(), 1);
              out->SetValue(color, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="Combine4" fourcc="COM4" desc="Combine 4 individual floats into a vec4">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="input3" type="voidptr"/>
      <InArg name="input4" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* red = (Nody::SimResult*)input1;
          Nody::SimResult* green = (Nody::SimResult*)input2;
          Nody::SimResult* blue = (Nody::SimResult*)input3;
          Nody::SimResult* alpha = (Nody::SimResult*)input4;
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              const Math::float4& c1 = red->GetValue(x, y);
              const Math::float4& c2 = green->GetValue(x, y);
              const Math::float4& c3 = blue->GetValue(x, y);
              const Math::float4& c4 = alpha->GetValue(x, y);
              Math::float4 color;
              color.set(c1.x(), c2.y(), c3.z(), c4.w());
              out->SetValue(color, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>

    <Command name="SeparateAlpha" fourcc="SEPA" desc="Separate alpha from RGB">
      <InArg name="input1" type="voidptr"/>
      <InArg name="input2" type="voidptr"/>
      <InArg name="input3" type="voidptr"/>
      <InArg name="input4" type="voidptr"/>
      <InArg name="output" type="voidptr"/>
      <Code>
        <![CDATA[
          Nody::SimResult* red = (Nody::SimResult*)input1;
          Nody::SimResult* green = (Nody::SimResult*)input2;
          Nody::SimResult* blue = (Nody::SimResult*)input3;
          Nody::SimResult* alpha = (Nody::SimResult*)input4;
          Nody::SimResult* out = (Nody::SimResult*)output;
          
          IndexT x, y;
          for (x = 0; x < out->GetWidth(); x++)
          {
            for (y = 0; y < out->GetHeight(); y++)
            {
              const Math::float4& c1 = red->GetValue(x, y);
              const Math::float4& c2 = green->GetValue(x, y);
              const Math::float4& c3 = blue->GetValue(x, y);
              const Math::float4& c4 = alpha->GetValue(x, y);
              Math::float4 color;
              color.set(c1.x(), c2.y(), c3.z(), c4.w());
              out->SetValue(color, x, y);
            }
          }
          out->UpdateGraphics();
        ]]>
      </Code>
    </Command>
		
	</Library>  
</Nebula3>