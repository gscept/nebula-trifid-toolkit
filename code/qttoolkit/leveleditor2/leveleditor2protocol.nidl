<?xml version="1.0" encoding="utf-8"?>
<Nebula3>
  <AttributeLib>
    <Dependency header="navigation/navigationattributes.h"/>
    <Dependency header="graphicsfeature/graphicsattr/graphicsattributes.h"/>
    <Dependency header="leveleditor2entitymanager.h"/>
    <Dependency header="properties/editorproperty.h"/>
    <Dependency header="basegamefeature/managers/entitymanager.h"/>  
  </AttributeLib>
  <Property name="LevelEditor2::EditorNavMeshProperty" header="properties/editornavmeshproperty.h">
    <Attribute name="MaxEdgeLength" />
    <Attribute name="RegionMinSize" />
    <Attribute name="RegionMergeSize" />
    <Attribute name="AgentRadius" />
    <Attribute name="AgentHeight" />
    <Attribute name="MaxEdgeError" />
    <Attribute name="DetailSampleDist" />
    <Attribute name="DetailSampleMaxError" />
    <Attribute name="MaxSlope" />
    <Attribute name="CellHeight" />
    <Attribute name="CellSize" />
    <Attribute name="AgentMaxClimb" />
    <Attribute name="NavMeshData" />
    <Attribute name="EntityReferences" />
    <Attribute name="AreaEntityReferences" />
    <Attribute name="NavMeshMeshString" />
    <Attribute name="NavMeshCenter" />
    <Attribute name="NavMeshExtends" />
  </Property>

  <Property name="LevelEditor2::EditorLightProbeProperty" header="lighting/editorlightprobeproperty.h" derivedFrom="GraphicsFeature::LightProbeProperty">
    <Attribute name="ProbeName"/>
    <Attribute name="ProbeResolutionWidth"/>
    <Attribute name="ProbeResolutionHeight"/>
    <Attribute name="ProbeBuildReflections"/>
    <Attribute name="ProbeBuildIrradiance"/>
    <Attribute name="ProbeBuildDepth"/>
    <Attribute name="ProbeGenerateMipmaps"/>
    <Attribute name="ProbeAutoAssignMaps"/>
    <Attribute name="ProbeOutputFolder"/>
    <Attribute name="ProbeOutputFilename"/>
  </Property>
  <Property name="LevelEditor2::EditorNavAreaProperty" header="properties/editornavareaproperty.h">
    <Attribute name="NavMeshAreaFlags"/>
    <Attribute name="NavMeshAreaCost"/>
    <Attribute name="NavMeshMeshString"/>
  </Property>
  <Protocol namespace="LevelEditor2" name="LevelEditor2Protocol">

    <!-- dependencies? -->
    <Dependency header="util/string.h"/>
    <Dependency header="game/entity.h"/>
    <Dependency header="basegamefeature/basegameattr/basegameattributes.h"/>
    <Dependency header="basegamefeature/basegameprotocol.h"/>
    <Dependency header="basegamefeature/managers/focusmanager.h"/>
    <Dependency header="leveleditor2app.h"/>
    <Dependency header="core/rtti.h"/>
    <Dependency header="attr/attributecontainer.h"/>

    <!-- LoadLevel message nood -->
    <Message name="EntitySelected" fourcc="ENSE">
      <InArg name="Selected" type="bool"/>
    </Message>
    <Message name="GetEntityValues" fourcc="GETV">
      <OutArg name="Attrs" type="Attr::AttributeContainer"/>
      <OutArg name="Props" type="Util::Array<Core::Rtti*>"/>
    </Message>
    <Message name="SetAttributes" fourcc="SRAT">
      <InArg name="Attrs" type="Attr::AttributeContainer"/>
    </Message>
    <Message name="SetProperties" fourcc="SETP">
      <InArg name="Props" type="Util::Array<Core::Rtti*>"/>
    </Message>
    <Message name="UpdateChildrenTransforms" fourcc="UTRC">
      <InArg name="BaseTransform" type="Math::matrix44"/>
      <InArg name="InvBaseTransform" type="Math::matrix44"/>
      <InArg name="DeltaTransform" type="Math::matrix44"/>
    </Message>
    <Message name="CreateNavMesh" fourcc="CRNM">
      <InArg name="Entities" type="Util::Array<Ptr<Game::Entity>>"/>      
    </Message>
    <Message name="UpdateNavMesh" fourcc="UPNM" scripted="true"/>
    <Message name="SaveNavMesh" fourcc="SVNM" />

    <Message name="SetMultiSelection" fourcc="SMSL">
      <InArg name="Entities" type="Util::Array<Ptr<Game::Entity>>"/>      
    </Message>
    <Message name="BeginProbeBuild" fourcc="BGPB">
    </Message>
    <Message name="EndProbeBuild" fourcc="ENPB">
    </Message>
  </Protocol>
  <Library name="LeveleditorCommands">
    <Command name="geteditorcamera" fourcc="gedc" desc="retrieves current camera in leveleditor">
      <OutArg name="entity" type="uint"/>
      <Code>
        <![CDATA[
        return BaseGameFeature::FocusManager::Instance()->GetCameraFocusEntity()->GetUniqueId();
       ]]>
      </Code>
    </Command>
    <Command name="setentitytransform" fourcc="setr" desc="sets and entity transform">
      <InArg name="eid" type="uint"/>
      <InArg name="cam" type="matrix44"/>
      <Code>
        <![CDATA[
        Ptr<LevelEditor2::TransformAction> action = LevelEditor2::TransformAction::Create();
        Util::Array<Ptr<Game::Entity>> entArray;
        entArray.Append(BaseGameFeature::EntityManager::Instance()->GetEntityByUniqueId(eid));
        Util::Array<Math::matrix44> trans;
        trans.Append(entArray[0]->GetMatrix44(Attr::Transform));
        action->SetEntitiesStart(entArray,trans);
        trans.Clear();
        trans.Append(cam);
        action->SetEntitiesEnd(trans);
			  LevelEditor2::ActionManager::Instance()->PerformAction(action.upcast<LevelEditor2::Action>());        
       ]]>
      </Code>
    </Command>
    <Command name="RegisterPropertyCallback" fourcc="RPCB" desc="register property callback for ui">
      <InArg name="property" type="string"/>
      <InArg name="name" type="string"/>
      <InArg name="script" type="string"/>
      <Code>
        <![CDATA[
        LevelEditor2::LevelEditor2App::Instance()->RegisterPropertyCallback(property, name, script);
       ]]>
      </Code>
    </Command>
    <Command name="RegisterScript" fourcc="RSCR" desc="register a script">     
      <InArg name="name" type="string"/>
      <InArg name="script" type="string"/>
      <Code>
        <![CDATA[
        LevelEditor2::LevelEditor2App::Instance()->RegisterScript(name, script);
       ]]>
      </Code>
    </Command>
    <Command name="seteditorentityattribute" fourcc="SEEA" desc="sets an attribute on a leveleditor entity">
      <InArg name="entityid" type="uint"/>
      <InArg name="attribute" type="string"/>
      <InArg name="value" type="string"/>
      <Code>
        <![CDATA[
        Ptr<Game::Entity> entity = BaseGameFeature::EntityManager::Instance()->GetEntityByUniqueId(entityid);
	      n_assert2(entity.isvalid(),"Provided invalid entity id or entity not found!");
	      Attr::AttrId att(attribute);
	      Attr::Attribute newatt(att);
	      newatt.SetValueFromString(value);
        Ptr<BaseGameFeature::SetAttribute> msg = BaseGameFeature::SetAttribute::Create();
        msg->SetAttr(newatt);
        __SendSync(entity,msg);
       ]]>
      </Code>
    </Command>
    <Command name="creategroup" fourcc="crgr" desc="create a new group node">      
      <InArg name="name" type="string"/>
      <OutArg name="id" type="string"/>
      <Code>
        <![CDATA[
         Util::Guid g = LevelEditor2::LevelEditor2EntityManager::Instance()->CreateTransformEntity(name);
         return g.AsString();
       ]]>
      </Code>
    </Command>
    <Command name="addtogroup" fourcc="adgr" desc="adds entity to group">      
      <InArg name="groupguid" type="string"/>
      <InArg name="entityid" type="uint"/>
      <Code>
        <![CDATA[
        Util::Guid g = Util::Guid::FromString(groupguid);
        Ptr<Game::Entity> entity = BaseGameFeature::EntityManager::Instance()->GetEntityByUniqueId(entityid);        
         entity->SetGuid(Attr::ParentGuid,g);
         LevelEditor2::LevelEditor2App::Instance()->GetWindow()->GetEntityTreeWidget()->RebuildTree();
       ]]>
      </Code>
    </Command>
    <Command name="getselection" fourcc="gslt" desc="retrieves selected entities in leveleditor">
      <OutArg name="items" type="intArray"/>
      <Code>
        <![CDATA[
          Util::Array<Ptr<Game::Entity>> ents = LevelEditor2::SelectionUtil::Instance()->GetSelectedEntities();
          Util::Array<int> ids;
          for(int i = 0 ; i<ents.Size();i++)
          {
            ids.Append(ents[i]->GetUniqueId());
          }
          return ids;
        ]]>
      </Code>
    </Command>
    <Command name="getsize" fourcc="gtbx" desc="retrieve bounding box size">
      <InArg name="id" type="uint"/>
      <OutArg name="mat" type="float4"/>
      <Code>
        <![CDATA[
          Ptr<Game::Entity> ent = BaseGameFeature::EntityManager::Instance()->GetEntityByUniqueId(id);
          Ptr<GraphicsFeature::GetModelEntity> msg = GraphicsFeature::GetModelEntity::Create();
			    ent->SendSync(msg.cast<Messaging::Message>());
			    const Ptr<Graphics::ModelEntity>& model = msg->GetEntity();
          Math::vector vec(1);
          if(model.isvalid())
          {
                Math::bbox box = model->GetGlobalBoundingBox();
                return box.size();
          }            
          return vec;
        ]]>
      </Code>
    </Command>
    <Command name="CreateEnvironmentEntity" fourcc="CREE" desc="Creates an environment entity using a position and euler angles">
      <InArg name="Position" type="float4"/>
      <InArg name="Angles" type="float4"/>
      <InArg name="Resource" type="string"/>
      <Code>
        <![CDATA[
            Math::matrix44 mat = Math::matrix44::multiply(Math::matrix44::rotationyawpitchroll(Angles.x(), Angles.y(), Angles.z()), Math::matrix44::translation(Position));
            LevelEditor2::EntityGuid uid = LevelEditor2::LevelEditor2EntityManager::Instance()->CreateEnvironmentEntity(Resource);
            const Ptr<Game::Entity>& ent = LevelEditor2::LevelEditor2EntityManager::Instance()->GetEntityById(uid);
            Ptr<BaseGameFeature::UpdateTransform> msg = BaseGameFeature::UpdateTransform::Create();
            msg->SetMatrix(mat);
            ent->SetMatrix44(Attr::Transform, mat);
            __SendSync(ent, msg);
            ]]>
      </Code>
    </Command>
  </Library>
</Nebula3>